let Eq (a : *) (eqA : ../Eq a) : ../Eq (../List a) =
        \(xs1 : ../List a)
    ->  \(xs2 : ../List a)
    ->  let m : ../Maybe (../List a) =
            xs1
            (../Maybe (../List a))
            (\(y1 : a) -> \(mys2 : ../Maybe (../List a)) ->
                mys2
                (../Maybe (../List a))
                (../Maybe/Nothing (../List a))
                (\(ys2 : ../List a) ->
                    ./unsnoc a ys2
                    (../Maybe (../List a))
                    (../Maybe/Nothing (../List a))
                    (\(zs2 : ../Prod2 (../List a) a) ->
                        zs2
                        (../Maybe (../List a))
                        (\(as2 : ../List a) -> \(a2 : a) ->
                            eqA y1 a2
                            (../Maybe (../List a))
                            (../Maybe/Just (../List a) as2)
                            (../Maybe/Nothing (../List a))
                        )
                    )
                )
            )
            (../Maybe/Just (../List a) xs2)
        in  m
            ../Bool
            ../Bool/False
            (\(xs : ../List a) -> ./null a xs)
in  Eq
