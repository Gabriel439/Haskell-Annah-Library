let tail (a : *) (xs : ../List a) : ../Maybe (../List a) =
    type S
    data Empty
    data NonEmpty (head : a) (tail : ../List a)
    fold foldS
    in

    let s : S =
        xs
        S
        (\(x : a) -> \(s : S) -> foldS s
            S
            (NonEmpty x [nil a])
            (\(head : a) -> \(tail : ../List a) ->
                NonEmpty x (./Cons a head tail)
            )
        )
        Empty

    in  foldS s
        (../Maybe (../List a))
        (../Maybe/Nothing (../List a))
        (\(_ : a) -> \(tail : ../List a) -> ../Maybe/Just (../List a) tail)

in  tail
