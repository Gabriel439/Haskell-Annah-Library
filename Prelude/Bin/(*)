λ(bin1 : #Bin ) → λ(bin2 : #Bin ) → bin1 #Bin  #Bin/Zero  (λ(bin_ : #Bin/Bin_ ) → bin_ (∀(S : *) → ∀(MkS : #Bin  → #Bin  → S) → S) (λ(S : *) → λ(MkS : #Bin  → #Bin  → S) → MkS #Bin/Zero  #Bin/Zero ) (λ(t : ∀(S : *) → ∀(MkS : #Bin  → #Bin  → S) → S) → t (∀(S : *) → ∀(MkS : #Bin  → #Bin  → S) → S) (λ(place : #Bin ) → λ(_ : #Bin ) → λ(S : *) → λ(MkS : #Bin  → #Bin  → S) → MkS (#Bin/succ  place) _)) (λ(t : ∀(S : *) → ∀(MkS : #Bin  → #Bin  → S) → S) → t (∀(S : *) → ∀(MkS : #Bin  → #Bin  → S) → S) (λ(place : #Bin ) → λ(accum : #Bin ) → λ(S : *) → λ(MkS : #Bin  → #Bin  → S) → MkS (#Bin/succ  place) (#Bin/(+)  (bin2 #Bin  #Bin/Zero  (λ(bin_ : #Bin/Bin_ ) → #Bin/One  (bin_ #Bin/Bin_  (#Bin/foldNat  place #Bin/Bin_  #Bin/Zero_  #Bin/Nil_ ) #Bin/Zero_  #Bin/One_ ))) accum))) #Bin  (λ(place : #Bin ) → #Bin/(+)  (bin2 #Bin  #Bin/Zero  (λ(bin_ : #Bin/Bin_ ) → #Bin/One  (bin_ #Bin/Bin_  (#Bin/foldNat  place #Bin/Bin_  #Bin/Zero_  #Bin/Nil_ ) #Bin/Zero_  #Bin/One_ )))))
